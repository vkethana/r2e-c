Running command: make clean
> Cleaning up files
Command finished with return code: 0

Running command: make distclean
make: *** No rule to make target 'distclean'.  Stop.
Command finished with return code: 2

Running command: rm -rf autom4te.cache
Command finished with return code: 0

Running command: rm -f config.status config.cache config.log
Command finished with return code: 0

Running command: ./autogen
/bin/sh: 1: ./autogen: not found
Command finished with return code: 127

Running command: ./configure
/bin/sh: 1: ./configure: not found
Command finished with return code: 127

Running command: make
> Building example-enet
> Building example-packing
> Building example-simple
> Building example-unpacking
> Building example-world
> Building library
> Building manual-testing
> Building query-performance
> Building apps
> Building unit
> Building unit tests
> testing suite:

   *   suite: librg
   * modules: 4

--------------------------------------
 module: general
--------------------------------------
 * [[32mPASS[0m]: It should be able to allocate and free an instance 
 * [[32mPASS[0m]: It should be return proper check for is valid 
 * [[32mPASS[0m]: It should allow to set and retrieve a custom userdata 
 * [[32mPASS[0m]: It should properly set a chunk world size (amount) 
 * [[32mPASS[0m]: It should force world size to have at least one chunk in each direction 
 * [[32mPASS[0m]: It should properly set a chunk size 
 * [[32mPASS[0m]: It should properly set a chunk offsets 
 * [[32mPASS[0m]: It should properly handle set of chunk line calculations 
 * [[32mPASS[0m]: It should correctly calculate weird world sizes 
 * [[32mPASS[0m]: It should correctly calculate chunk id for 2d top-left mode 
 * [[32mPASS[0m]: It should correctly calculate chunk id for 2d mid-mid (centered) mode 
 * [[32mPASS[0m]: It should correctly calculate chunk id for 2d bottom-right mode 
 * [[32mPASS[0m]: It should correctly calculate chunk id for 3d top-left mode 
 * [[32mPASS[0m]: It should correctly calculate chunk id for 3d mid-mid (centered) mode 
 * [[32mPASS[0m]: It should correctly calculate chunk id for 3d bottom-right mode 
 * [[32mPASS[0m]: It should calculate chunk id from a floating position in 2d top-left mode 
 * [[32mPASS[0m]: It should calculate chunk id from a floating position in 3d top-left mode 
 * [[32mPASS[0m]: It should calculate chunk coords from chunk id from weird world size 
 * [[32mPASS[0m]: It should calculate chunk coords from chunk id from world size 3x3 and offsets 
 * [[32mPASS[0m]: It should calculate chunk coords from chunk id from world size 4x4 and offsets 

 results: 20 total, 0 failed[0m, [32m20 passed[0m
--------------------------------------
 module: entity
--------------------------------------
 * [[32mPASS[0m]: It should be able to track and untrack an entity 
 * [[32mPASS[0m]: It should be able to properly set a userdata 
 * [[32mPASS[0m]: It should be able to properly set a chunk 
 * [[32mPASS[0m]: It should be able to properly set an owner 
 * [[32mPASS[0m]: It should be able to properly set a dimension 
 * [[32mPASS[0m]: It should be able to properly set an array of chunks 
 * [[32mPASS[0m]: It should be able to properly set an array of chunks with overflow 
 * [[32mPASS[0m]: It should fail when attempting to set data onto untracked entity 

 results: 8 total, 0 failed[0m, [32m8 passed[0m
--------------------------------------
 module: query
--------------------------------------
 * [[32mPASS[0m]: It should be able to fetch all tracked entities 
 * [[32mPASS[0m]: It should be able to fetch entities within a chunk 
 * [[32mPASS[0m]: It should be able to fetch entities from chunk array 
 * [[32mPASS[0m]: It should be able to fetch entities from owner array 
 * [[32mPASS[0m]: It should be able to query and return empty result 
 * [[32mPASS[0m]: It should query and return with own entities for owner 
 * [[32mPASS[0m]: It should query and return with own entities for owner from multi dimensions 
 * [[32mPASS[0m]: It should query within same chunk 
 * [[32mPASS[0m]: It should query within same chunk but different dimensions 
 * [[32mPASS[0m]: It should query multiple owned entities in same chunk across multiple dimensions 
 * [[32mPASS[0m]: It should query entities using spherical check 
 * [[32mPASS[0m]: It should properly exclude globally-invisible entity 
 * [[32mPASS[0m]: It should properly include always-globally-visible entity without regards of chunk radius 
 * [[32mPASS[0m]: It should properly include always-globally-visible entity without regards of dimension 
 * [[32mPASS[0m]: It should properly exclude owner-invisible entity 
 * [[32mPASS[0m]: It should properly exclude owner-invisible own entity 
 * [[32mPASS[0m]: It should properly include default-owner-visible entity without regards of chunk radius 
 * [[32mPASS[0m]: It should properly include default-owner-visible entity without regards of dimension 
 * [[32mPASS[0m]: It should properly exclude owner-invisible entity overriding always-globally-visible 
 * [[32mPASS[0m]: It should exclude default-owner-visible entity overriding always-globally-visible 
 * [[32mPASS[0m]: It should query entities with boundary checks on top-left 
 * [[32mPASS[0m]: It should query entities with boundary checks on mid-mid 
 * [[32mPASS[0m]: It should query entities with 0 radius 
 * [[32mPASS[0m]: It should query entities within big worlds 
 * [[32mPASS[0m]: It it should run query with exact value on limit 
 * [[32mPASS[0m]: It it should properly calculate recommended size for the query 

 results: 26 total, 0 failed[0m, [32m26 passed[0m
--------------------------------------
 module: packing
--------------------------------------
 * [[32mPASS[0m]: It should write create for single entity 
 * [[32mPASS[0m]: It should write create section 
 * [[32mPASS[0m]: It should write create section with extra data 
 * [[32mPASS[0m]: It should skip writing create section with rejection and ignore data 
 * [[32mPASS[0m]: It should write create section with size limit 
 * [[32mPASS[0m]: It should write create section with size limit and give rest on second call 
 * [[32mPASS[0m]: It should write create section with limit + data 
 * [[32mPASS[0m]: It should write create section with limit and give rest on second call + data 
 * [[32mPASS[0m]: It should write update section 
 * [[32mPASS[0m]: It should write update for single entity 
 * [[32mPASS[0m]: It should write update section with extra data 
 * [[32mPASS[0m]: It should skip writing update section with rejection and ignore data 
 * [[32mPASS[0m]: It should write update section with size limit 
 * [[32mPASS[0m]: It should write update section with size limit and repeat same on second call 
 * [[32mPASS[0m]: It should write update section with limit + data 
 * [[32mPASS[0m]: It should write update section with limit and give repeat same on second call + data 
 * [[32mPASS[0m]: It should write remove section 
 * [[32mPASS[0m]: It should write remove section with extra data 
 * [[32mPASS[0m]: It should write remove section on second call if first was limited 
 * [[32mPASS[0m]: It should skip writing remove section with rejection and ignore data 
 * [[32mPASS[0m]: It should read create for single entity 
 * [[32mPASS[0m]: It should fail to read create for single entity with extra data 
 * [[32mPASS[0m]: It should fail to read create for single entity with invalid data 
 * [[32mPASS[0m]: It should read created entity should be foreign, and untrack should error out 
 * [[32mPASS[0m]: It should read create for single entity, and call error event if entity is already tracked 
 * [[32mPASS[0m]: It should read update for single entity 
 * [[32mPASS[0m]: It should fail to read update for single entity with extra data 
 * [[32mPASS[0m]: It should fail to read update for single entity with invalid data 
 * [[32mPASS[0m]: It should read updated entity should be foreign, and error out if it is not 
 * [[32mPASS[0m]: It should read remove for single entity 
 * [[32mPASS[0m]: It should fail to read remove for single entity with extra data 
 * [[32mPASS[0m]: It should fail to read remove for single entity with invalid data 
 * [[32mPASS[0m]: It should prevent foreign entity from be untracked manually 
 * [[32mPASS[0m]: It should read update backwards (from foreign entity) and call update event 
 * [[32mPASS[0m]: It should not read update backwards (from foreign entity) if token has changed 

 results: 35 total, 0 failed[0m, [32m35 passed[0m
--------------------------------------
> total:

 * modules: 4 total, 0 failed[0m, [32m4 passed[0m
 * tests:   89 total, 0 failed[0m, [32m89 passed[0m

Command finished with return code: 0

